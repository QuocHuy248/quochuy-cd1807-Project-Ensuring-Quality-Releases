name: HuyLQ54-Pipeline-$(Date:yyyyMMddHHmmss)

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
  - main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab.
# Otherwise, comment out the line below.
pool: myAgentPool

variables:
  python.version: "3.7.6"
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: "myServiceConnection"
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: "test"

stages:
  #--------------------------------------------#
  # BUILD STAGE
  #--------------------------------------------#
  - stage: Infrastructure
    jobs:
      - job: BuildInfrastructure
        steps:
          #--------------------------------------------#
          # Use Terraform to create the Infrastructure
          # Install Terraform on the pipeline agent
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: "Terrafom installation"
            inputs:
              terraformVersion: "1.2.9"

          # Run Terraform Init on the pipeline agent
          # ToDo: Replace the resource group name, storage account name, and container name below
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
            displayName: "Terrafom init"
            inputs:
              provider: "azurerm"
              command: "init"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test"
              backendServiceArm: "$(azureServiceConnectionId)"
              backendAzureRmResourceGroupName: "Azuredevops"
              backendAzureRmStorageAccountName: "tfstate1793412797"
              backendAzureRmContainerName: "tfstate"
              backendAzureRmKey: "test.terraform.tfstate"

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
            displayName: Terraform validate
            inputs:
              provider: "azurerm"
              command: "validate"

          # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it.
          # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module.
          # Install public key and private key file to the pipeline agent, using the task below.
          # ToDo: Change the inputs value below
          # - task: InstallSSHKey@0
          #   inputs:
          #     knownHostsEntry: 'KNOWN_HOSTS_STRING' # variable value
          #     sshPublicKey: 'PUBLIC_KEY'            # variable value
          #     sshKeySecureFile: 'id_rsa' # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file

          # - task: DownloadSecureFile@1
          #  name: udacity_public_key
          #  displayName:
          #  inputs:
          #   secureFile:

          # Run Terraform Apply
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
            displayName: Terraform apply
            inputs:
              provider: "azurerm"
              command: "apply"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test"
              environmentServiceNameAzureRM: "$(azureServiceConnectionId)"

          # ToDo: Change the workingDirectory path, as applicable to you
          # Destroy the resources in Azure by running a separate pipeline.
          # - task: TerraformTaskV3@3
          #   displayName: Terraform destroy
          #   inputs:
          #     provider: 'azurerm'
          #     command: 'destroy'
          #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
          #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
          #--------------------------------------------#

  - stage: Build
    dependsOn: Infrastructure
    jobs:
      - job: Archive_fakerestapi_web_package
        steps:
          # Archive the web package
          - task: ArchiveFiles@2
            displayName: "Archive fakerestapi web package"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/webapp-$(Build.BuildId)"
              replaceExistingArchive: true

          # Publish the archived package as an artifact
          - task: PublishBuildArtifacts@1
            displayName: "Publish Artifact: webapp"
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/webapp-$(Build.BuildId).zip"
              ArtifactName: "webapp-$(Build.BuildId)"
  - stage: Deploy
    dependsOn: Build
    jobs:
      - job: DeployWebAppToAzure
        steps:
          # Download the published artifact
          - task: DownloadPipelineArtifact@2
            displayName: "Download webapp artifact"
            inputs:
              artifact: "webapp-$(Build.BuildId)"

              # Deploy the archived package to Azure Web App
          - task: AzureWebApp@1
            displayName: "Deploy to Azure Web App"
            inputs:
              azureSubscription: "$(azureServiceConnectionId)"
              appType: "webApp"
              appName: "myApplication-AppService"
              package: "$(Pipeline.Workspace)/webapp-$(Build.BuildId).zip"
              deployToSlotOrASE: false
