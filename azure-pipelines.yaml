name: HuyLQ54-Pipeline-$(Date:yyyyMMddHHmmss).$(Rev:r)

trigger:
  - main

pool: myAgentPool

variables:
  python.version: "3.7.6"

  azureServiceConnectionId: "myServiceConnection"

  projectRoot: $(System.DefaultWorkingDirectory)

  environmentName: "test"
  webAppName: "myApplication-QuocHuyAppService"

stages:
  #--------------------------------------------#
  # BUILD STAGE
  #--------------------------------------------#
  - stage: Infrastructure
    jobs:
      - job: BuildInfrastructure
        steps:
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: "Terrafom installation"
            inputs:
              terraformVersion: "1.2.9"

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
            displayName: "Terrafom init"
            inputs:
              provider: "azurerm"
              command: "init"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test"
              backendServiceArm: "$(azureServiceConnectionId)"
              backendAzureRmResourceGroupName: "Azuredevops"
              backendAzureRmStorageAccountName: "tfstate630920324"
              backendAzureRmContainerName: "tfstate"
              backendAzureRmKey: "test.terraform.tfstate"

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
            displayName: Terraform validate
            inputs:
              provider: "azurerm"
              command: "validate"

          # Run Terraform Apply
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
            displayName: Terraform apply
            inputs:
              provider: "azurerm"
              command: "apply"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test"
              environmentServiceNameAzureRM: "$(azureServiceConnectionId)"

          - task: ArchiveFiles@2
            displayName: "Archive FakeRestAPI"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip"

          - task: PublishPipelineArtifact@1
            displayName: Publish FakeRestAPI artifact
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip"
              artifactName: "drop-fakerestapi"

          - task: ArchiveFiles@2
            displayName: "Archive Selenium"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/selenium"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip"

          - task: PublishPipelineArtifact@1
            displayName: Publish Selenium artifact
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip"
              artifactName: "drop-ui-tests"

          - task: ArchiveFiles@2
            displayName: "Archive Performance TestSuite"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/testsuite"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip"

          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
            displayName: "Upload Package"
            artifact: "drop-perftests"

  - stage: Deploy
    jobs:
      - deployment: DeployFakeRestAPI
        displayName: "Deploy Webapp"
        pool: myAgentPool
        environment:
          name: "$(environmentName)"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: "Deploy Azure Web App"
                  inputs:
                    azureSubscription: "$(azureServiceConnectionId)"
                    appName: $(webAppName)
                    appType: "webApp"
                    package: "$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip"
                    DeploymentType: zipDeploy

  - stage: Tests
    jobs:
      - job: Integration
        displayName: "Integration Tests"
        pool: myAgentPool

        steps:
          - task: Bash@3
            displayName: "Install Postman & Newman"
            inputs:
              targetType: "inline"
              script: |
                #! /bin/bash
                pwd
                sudo snap install postman
                sudo npm install -g newman
                sudo npm install newman-reporter-junitfull -g

          - task: Bash@3
            displayName: "Regression Tests"
            continueOnError: true
            inputs:
              workingDirectory: "$(System.DefaultWorkingDirectory)/automatedtesting/postman"
              targetType: "inline"
              script:
                "newman run TestSuite.Regression.json -e Test.environment.json
                --reporters cli,junit --reporter-junit-export
                TEST-Regression.xml"

          - task: Bash@3
            displayName: "Data Validation Tests"
            continueOnError: true
            inputs:
              workingDirectory: "$(System.DefaultWorkingDirectory)/automatedtesting/postman"
              targetType: "inline"
              script:
                "newman run TestSuite.Data-Validation.json -e
                Test.environment.json --reporters cli,junit
                --reporter-junit-export TEST-DataValidation.xml"

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "**/TEST-*.xml"
              testRunTitle: "Publish test results"
              searchFolder: "$(System.DefaultWorkingDirectory)/automatedtesting/postman"

      - job: Performance
        displayName: "Performance Tests"
        pool: myAgentPool
        steps:
          - task: Bash@3
            displayName: "Endurance Test Suite"
            inputs:
              targetType: "inline"
              script: |
                cd ~/
                DIR=/home/devopsagent/testsuite
                if [ ! -d "$DIR" ]; then
                mkdir testsuite
                fi
                mv /home/devopsagent/myagent/_work/1/drop-perftests/$(Build.BuildId)-perftests.zip testsuite
                cd testsuite
                unzip -o $(Build.BuildId)-perftests.zip
                wget -q "https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.6.3.tgz"
                tar -xf apache-jmeter-5.6.3.tgz
                rm -Rf endurance-test-report
                ./apache-jmeter-5.6.3/bin/jmeter -n \
                -t EnduranceTestSuite.jmx \
                -l endurance-test-report/endurance-results.jtl \
                -e \
                -o endurance-test-report

          - task: Bash@3
            displayName: "Stress Test Suite"
            inputs:
              targetType: "inline"
              script: |
                cd ~/
                DIR=/home/devopsagent/testsuite
                if [ ! -d "$DIR" ]; then
                mkdir testsuite
                fi
                cd testsuite
                rm -Rf stress-test-report
                ./apache-jmeter-5.6.3/bin/jmeter -n \
                -t StressTestSuite.jmx \
                -l stress-test-report/stress-results.jtl \
                -e \
                -o stress-test-report

          - task: Bash@3
            displayName: "Print Performance Test Logs"
            inputs:
              targetType: "inline"
              workingDirectory: /home/devopsagent/testsuite
              script: |
                ls -lah endurance-test-report/
                ls -lah stress-test-report/
                cat jmeter.log

          #--------------------------------------------#
          # Selenium | Functional UI Tests
          # ToDo:
      - deployment: VMDeploy
        displayName: Selenium Tests
        pool: myAgentPool
        environment:
          name: "test"
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop-ui-tests

                - task: Bash@3
                  inputs:
                    targetType: "inline"
                    script: |
                      #! /bin/bash

                      sudo apt-get upgrade -y
                      sudo apt-get install python3-pip -y
                      sudo apt-get install unzip -y
                      sudo apt-get install -y chromium-browser
                      sudo apt-get install python3-venv
                      python3 -m venv selenium_env
                      source selenium_env/bin/activate
                      sudo DEBIAN_FRONTEND=noninteractive
                      pip install selenium
                      cd ~/
                      DIR=/home/azureuser/app
                      if [ ! -d "$DIR" ]; then
                          mkdir app
                      fi
                      mv /home/azureuser/azagent/_work/1/drop-ui-tests/selenium-$(Build.BuildId).zip app
                      cd app
                      unzip -o selenium-$(Build.BuildId).zip
                      FILE=/home/devopsagent/app/chromedriver_linux64.zip
                      if [ ! -f "$FILE" ]; then
                      wget https://storage.googleapis.com/chrome-for-testing-public/125.0.6422.141/linux64/chromedriver-linux64.zip
                      unzip -o chromedriver-linux64.zip
                      sudo ln -s $PWD/chromedriver /usr/local/bin/chromedriver
                      fi
                      export PATH=$PATH:/home/azureuser/app
                      echo "Starting Selenium Tests"
                      python3 add_remove_from_cart.py >> selenium.log
                      echo "Completed Selenium Tests. Check selenium.log for results."
                      cat selenium.log
